<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yumuxu.github.io/</id>
    <title>Yumuxu</title>
    <updated>2019-10-13T06:54:54.045Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yumuxu.github.io/"/>
    <link rel="self" href="https://yumuxu.github.io//atom.xml"/>
    <subtitle>Always!</subtitle>
    <logo>https://yumuxu.github.io//images/avatar.png</logo>
    <icon>https://yumuxu.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Yumuxu</rights>
    <entry>
        <title type="html"><![CDATA[Django 学习笔记 Day01]]></title>
        <id>https://yumuxu.github.io//post/django-xue-xi-bi-ji-day01</id>
        <link href="https://yumuxu.github.io//post/django-xue-xi-bi-ji-day01">
        </link>
        <updated>2019-10-13T05:20:57.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>配置选项
<ol>
<li><code>ROOT_URLCONF</code></li>
<li><code>TEMPLATES</code>描述了Django如何载入和渲染模板，<code>APP_DIR</code>设置成了True。这一选项将会让DjangoTmeplates在每个<code>INSTALLED_APPS</code>文件夹寻找“templates&quot;子目录。</li>
</ol>
</li>
<li>URL的捕获<br>
question_id=34 由 &lt;int:question_id&gt; 匹配生成使用尖括号“捕获”这部分URL，且以关键字参数的形式发给视图函数。<code>:question_id</code>部分定义了将被用于区分匹配模式的变量名，<code>int:</code>则是一个转换器决定了应该以什么变量类型匹配这部分URL路径。</li>
<li>每个视图必须要做的两件事
<ol>
<li>返回一个<code>HttpResponse</code></li>
<li>或者抛出有一个异常，比如<code>Http404</code></li>
</ol>
</li>
<li>快捷函数:<code>render()</code><br>
request 对象作为第一个参数，模板名作为第二个参数，字典对象作为可选的第三个参数</li>
<li>404错误<br>
快捷函数:<code>get_object_or_404() get_list_or_404()</code><pre><code>def detail(request, question_id):
 # try:
 #     question = Question.objects.get(pk=question_id)
 # except Question.DoesNotExist:
 #    raise Http404(&quot;Question does not exist&quot;)
     question = get_object_or_404(Question, question_id)
     return render(request, 'polls/detail.html', {'question': question})
</code></pre>
为什么不直接抛出DoesNotExist?因为这样做会增加模型层和视图层的耦合性。</li>
<li>去除模板中的硬编码URL<br>
<code>&lt;li&gt;&lt;a href=&quot;/polls/{{ question.id }}/&quot;&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;</code><br>
替换成<br>
<code>&lt;li&gt;&lt;a href=&quot;{% url 'detail' question.id %}&quot;&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;</code><br>
<code>url()</code>函数中通过name 参数为 polls.urls模块的URL定义的name<br>
<strong>为URL名称添加命名空间</strong><br>
在URLconf中添加命名空间<pre><code>...
app_name = 'polls'
urlpatterns = [
...
</code></pre>
修改为指向具有命名空间的详细试图:<pre><code>&lt;li&gt;&lt;a href=&quot;{% url 'polls:detail' question.id %}&quot;&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django 学习笔记 Day00]]></title>
        <id>https://yumuxu.github.io//post/django-xue-xi-bi-ji-day00</id>
        <link href="https://yumuxu.github.io//post/django-xue-xi-bi-ji-day00">
        </link>
        <updated>2019-10-11T03:45:20.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>相关命令</li>
</ol>
<pre><code>$ python -m django --version
$ django-admin startproject mysite
$ python manage.py runserver        #切换到有manage.py的目录
$ python manage.py startapp polls 
$ python manage.py migrate
$ python manage.py makemigrations polls
$ python manage.py sqlmigrate polls 0001
$ python manage.py check
$ python manage.py createsuperuser
</code></pre>
<ol start="2">
<li>
<p>INSTALL_APPS</p>
<ol>
<li>
<p><code>mysite/settings.py</code><strong>INSTALL_APPS</strong>，包括了会在你项目中启用的所有Django应用。<br>
默认包括Django的自带应用</p>
<blockquote>
<p>django.contrib.admin -- 管理员站点， 你很快就会使用它<br>
django.contrib.auth -- 认证授权系统。<br>
django.contrib.contenttypes -- 内容类型框架。<br>
django.contrib.sessions -- 会话框架。<br>
django.contrib.messages -- 消息框架。<br>
django.contrib.staticfiles -- 管理静态文件的框架。</p>
</blockquote>
</li>
<li>
<p>添加自己的应用到<strong>INSTALL_APPS</strong>,<br>
因为<code>PollConfig</code>类写在文件<code>polls/apps.py</code>中，所以他的点式路径是<code>polls.apps/PollsConfig</code>。</p>
<pre><code>INSTALLED_APPS = [
    'polls.apps.PollsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    ]
</code></pre>
</li>
</ol>
</li>
<li>
<p>通过运行 <code>makemigrations</code> 命令 生成迁移文件。使用<code>sqlmigrate</code>命令接收一个迁移的名称生成对应的SQL。数据库迁移被分解成生成和应用两个命令是为了让你能够在代码控制系统上提交迁移数据库并使其能在多个应用里使用。</p>
<ol>
<li>输出的内容和使用的SQL有关系</li>
<li>数据库的名称是由应用名(polls)和模型明的小写形式(question和choice)连接而来的(如果需要，可以自定义此行为)</li>
<li>主键(IDs)会被自动创建。(当然，你也可以自定义)</li>
<li>默认的，Django会在外键字段名后面追加字符串&quot;_id&quot;</li>
</ol>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows&Linux virtualenv&virtualenvwrapper 安装使用]]></title>
        <id>https://yumuxu.github.io//post/windowsandlinux-virtualenvandvirtualenvwrapper-install</id>
        <link href="https://yumuxu.github.io//post/windowsandlinux-virtualenvandvirtualenvwrapper-install">
        </link>
        <updated>2019-10-09T15:53:29.000Z</updated>
        <content type="html"><![CDATA[<p>在Windows和Linux环境下安装<code>virtualenv</code>和<code>virtualenvwrapper</code>的命令一样</p>
<pre><code>pip install virtualenv
pip install virtualenvwrapper-win       #如果是window，virtualenvwrapper-win
</code></pre>
<hr>
<p>Windows要使用<code>virtualwrapper</code>是要配置环境变量<br>
<code>WORK_HOME</code>，这是一个全部存放virtualenv目录的目录，例如D:/source/env<br>
然后可以使用virtualwrapper了，相关命令如下</p>
<blockquote>
<p>创建基本环境：mkvirtualenv [环境名]<br>
删除环境：rmvirtualenv [环境名]<br>
激活环境：workon [环境名]<br>
退出环境：deactivate<br>
列出所有环境：workon 或者 lsvirtualenv -b</p>
</blockquote>
<hr>
<p>Linux要需要进行配置,才能创建虚拟环境，使命的使用同Windows</p>
<pre><code>$ export WORKON_HOME=~/Envs
$ mkdir -p $WORKON_HOME
$ source /usr/local/bin/virtualenvwrapper.sh
$ mkvirtualenv env1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows-7-Python3-7-安装-mysqlclient]]></title>
        <id>https://yumuxu.github.io//post/windows-7-python3-7-install-mysqlclient</id>
        <link href="https://yumuxu.github.io//post/windows-7-python3-7-install-mysqlclient">
        </link>
        <updated>2019-10-09T14:53:35.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>网速较慢，设置使用清华大学开源软件镜像站，参考<a href="https://www.jianshu.com/p/d5b2b3bd5a3e">https://www.jianshu.com/p/d5b2b3bd5a3e</a></li>
</ol>
<pre><code>pip3 install mysqlclient
</code></pre>
<ol start="2">
<li>提示需要安装VC++<br>
为什么会出现这样的错误<br>
Windows Python needs Visual C++ libraries installed via the SDK to build code, such as via <code>setuptools.extension.Extension</code> or <code>numpy.distutils.core.Extension</code>. For example, building <a href="https://www.scivision.dev/tags/f2py"><code>f2py</code></a> modules in Windows with Python requires Visual C++ SDK as installed above. On Linux and Mac, the C++ libraries are installed with the compiler.</li>
</ol>
<pre><code>error: Microsoft Visual C++ 14.0 is required. Get it with &quot;Microsoft Visual C++ Build Tools&quot;: https://visualstudio.microsoft.com/downloads/
</code></pre>
<ol start="3">
<li>查找对应的资源<br>
<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysqlclient">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysqlclient</a><br>
其中cp27对应python2.7  win32表示window32位，win64表示windows64位系统。64位的不行安装32位的。</li>
</ol>
<pre><code>pip3 install mysqlclient-1.4.4-cp37-cp37m-win32.whl
Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
Processing f:\sydownload\mysqlclient-1.4.4-cp37-cp37m-win32.whl
Installing collected packages: mysqlclient
Successfully installed mysqlclient-1.4.4
</code></pre>
<ol start="4">
<li>测试使用mysqlclinet</li>
</ol>
<pre><code class="language-python">Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 22:20:52) [MSC v.1916 32 bit
(Intel)] on win32
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; conn = MySQLdb.connect(host='localhost',port=3306,user='root',passwd='root',db='xxxx')
&gt;&gt;&gt; cur = conn.cursor()
&gt;&gt;&gt; cur.execute('select * from xxxxxxx;')
13

&gt;&gt;&gt; cur.fetchall()
((2, '1BB1D9F3E1498E5CCBE899B451DE3548', 1551436800, 1553857200, 0, 0, '2357303'))...
</code></pre>
<p>参考：<br>
<a href="https://www.scivision.dev/python-windows-visual-c-14-required/">https://www.scivision.dev/python-windows-visual-c-14-required/</a><br>
<a href="http://swiftlet.net/archives/2987">http://swiftlet.net/archives/2987</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pypi-镜像使用帮助]]></title>
        <id>https://yumuxu.github.io//post/pypi-use-tsinghua-Mirroring</id>
        <link href="https://yumuxu.github.io//post/pypi-use-tsinghua-Mirroring">
        </link>
        <updated>2019-10-09T14:52:07.000Z</updated>
        <content type="html"><![CDATA[<p>临时使用</p>
<pre><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package
</code></pre>
<p>设为默认</p>
<pre><code>pip install pip -U
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U
pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre>
<p><a href="https://mirror.tuna.tsinghua.edu.cn/help/pypi/">https://mirror.tuna.tsinghua.edu.cn/help/pypi/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[查看debian的版本号]]></title>
        <id>https://yumuxu.github.io//post/show-debian-version</id>
        <link href="https://yumuxu.github.io//post/show-debian-version">
        </link>
        <updated>2019-10-09T14:51:12.000Z</updated>
        <content type="html"><![CDATA[<p>cat /etc/debian_version</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux-挂载windows共享盘]]></title>
        <id>https://yumuxu.github.io//post/linux-gua-zai-windows-gong-xiang-pan</id>
        <link href="https://yumuxu.github.io//post/linux-gua-zai-windows-gong-xiang-pan">
        </link>
        <updated>2019-10-09T14:49:59.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>确保windwos下共享盘已经开启，并且可以通过用户名密码访问</li>
<li>使用命令 <code>apt-get install cifs-utils</code> 安装cifs协议</li>
<li>使用命令 <code>mkdir /mnt/win7</code> 创建挂载目录</li>
<li>使用命令 <code>mount -t cifs -o username=xxxx,password=xxxx //xxx.xx.xx.xx/e$ /mnt/win7</code> 进行挂载</li>
<li>进入目录 /mnt/win7 查看是否挂载成功</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux-挂载windows共享盘]]></title>
        <id>https://yumuxu.github.io//post/linux-mount-windows-share</id>
        <link href="https://yumuxu.github.io//post/linux-mount-windows-share">
        </link>
        <updated>2019-10-09T14:49:59.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>确保windwos下共享盘已经开启，并且可以通过用户名密码访问</li>
<li>使用命令 <code>apt-get install cifs-utils</code> 安装cifs协议</li>
<li>使用命令 <code>mkdir /mnt/win7</code> 创建挂载目录</li>
<li>使用命令 <code>mount -t cifs -o username=xxxx,password=xxxx //xxx.xx.xx.xx/e$ /mnt/win7</code> 进行挂载</li>
<li>进入目录 /mnt/win7 查看是否挂载成功</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux-多版本Python-pip-for-Python3]]></title>
        <id>https://yumuxu.github.io//post/linux-duo-ban-ben-python-pip-for-python3</id>
        <link href="https://yumuxu.github.io//post/linux-duo-ban-ben-python-pip-for-python3">
        </link>
        <updated>2019-10-09T14:49:19.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>使用命令下载脚本 <code>curl -O https://bootstrap.pypa.io/get-pip.py</code></li>
<li>使用python3运行脚本 <code>python3 get-pip.py</code></li>
<li>安装完成之后就<code>/usr/local/bin</code>下就会有pip3</li>
<li>创建软连接到 <code>/usr/bin</code> 就可以在Terminal下正常使用<code>ln -s /usr/local/bin/pip3 /usr/bin/pip3</code></li>
<li>参考<a href="http://stackoverflow.com/questions/11268501/how-to-use-pip-with-python-3-x-alongside-python-2-x">How to use pip with Python 3.x alongside Python 2.x</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux-Set-Date]]></title>
        <id>https://yumuxu.github.io//post/linux-set-datemd</id>
        <link href="https://yumuxu.github.io//post/linux-set-datemd">
        </link>
        <updated>2019-10-09T14:47:44.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li><code>date -s &quot;2016-02-06 00:00:00&quot;</code></li>
<li><code>hwclock --systohc</code></li>
</ol>
]]></content>
    </entry>
</feed>